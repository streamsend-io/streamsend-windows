name: Build Cross-Platform

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows - our main target
          - target: x86_64-pc-windows-msvc
            os: windows-2022
            features: "windows"
            
          # Linux for comparison
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-20.04
            features: "linux"
            
          # macOS for development
          - target: x86_64-apple-darwin
            os: macos-12
            features: "linux"  # Same as Linux

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      # Linux dependencies
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake pkg-config libssl-dev build-essential
          
      # macOS dependencies  
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install cmake
          
      # Windows dependencies
      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # CMake should be pre-installed, but ensure it's available
          cmake --version
          
          # Verify Visual Studio Build Tools
          $vsWhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          if (Test-Path $vsWhere) {
            & $vsWhere -latest -property installationPath
          }

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      # Build step
      - name: Build
        run: |
          cargo build --release --target ${{ matrix.target }} --features "${{ matrix.features }}"
          
      # Test the executable (Windows only)
      - name: Test Windows executable - Basic
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Write-Output "Testing Windows executable basic functionality..."
          .\target\${{ matrix.target }}\release\kafka-windows-example.exe
          
      # Test with real credentials (hidden in secrets)
      - name: Test Windows executable - SSL/SASL
        if: runner.os == 'Windows' && github.event_name != 'pull_request'
        shell: powershell
        env:
          KAFKA_BOOTSTRAP_SERVERS: ${{ secrets.CONFLUENT_BOOTSTRAP_SERVERS }}
          KAFKA_SECURITY_PROTOCOL: "SASL_SSL"
          KAFKA_SASL_USERNAME: ${{ secrets.CONFLUENT_API_KEY }}
          KAFKA_SASL_PASSWORD: ${{ secrets.CONFLUENT_API_SECRET }}
        run: |
          Write-Output "Testing SSL/SASL functionality (credentials hidden)..."
          Write-Output "Bootstrap servers: [HIDDEN]"
          Write-Output "Username: [HIDDEN]"
          Write-Output "Protocol: SASL_SSL"
          
          # Run the actual test
          .\target\${{ matrix.target }}\release\kafka-windows-example.exe
          
      # Package binaries
      - name: Package binary (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/kafka-windows-example artifacts/kafka-windows-example-${{ matrix.target }}
          
      - name: Package binary (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path artifacts
          Copy-Item target\${{ matrix.target }}\release\kafka-windows-example.exe artifacts\kafka-windows-example-${{ matrix.target }}.exe
          
      # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kafka-windows-example-${{ matrix.target }}
          path: artifacts/*
